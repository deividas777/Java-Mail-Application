package m_mail_app;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.JCheckBox;

public class Decryptor_GUI extends JFrame {

	private JPanel contentPane;
	public static final int BUFFER_SIZE = 65536;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Decryptor_GUI frame = new Decryptor_GUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Decryptor_GUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new TitledBorder(new EtchedBorder(), "Display Area"));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		JScrollPane scroll = new JScrollPane();
		scroll.setBounds(12, 23, 414, 164);
		scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		contentPane.add(scroll);
		
		final JTextArea textArea = new JTextArea();
		textArea.setEditable(true);
		scroll.setViewportView(textArea);
		textArea.setText("Some features do not work yet, BUILD AES KEY from the\n file doesn't work! Problem exist in rebuilding the original\n"
				+ " AES key from the decrypted Binary file!\n To Begin press Decrypt Button!");
		
		JButton btnDecrypt = new JButton("Decrypt");
		btnDecrypt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0){
							
				RsaEncryption rsa = new RsaEncryption();
				try {
					rsa.decryptSessionKey();
					File file = new File("/root/Desktop/keys2/decrypted_RSA_AESKeyFile");
					if(file.exists()){
						textArea.setText("Success!");
					}
				} catch (Exception e) {
					
					e.printStackTrace();
				}
			}
		});
		btnDecrypt.setBounds(12, 199, 129, 25);
		contentPane.add(btnDecrypt);
		
		JButton btnBuildKey = new JButton("Build AES Key");
		btnBuildKey.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try{
				
				textArea.setText("");
				//File for writing output
					
				FileOutputStream keyFOS = new FileOutputStream("/root/Desktop/keys2/AESKeyFile_Revealed");
				ObjectOutputStream keyOOS = new ObjectOutputStream(keyFOS);
				
				//Generate random AES key using random bits generated by generateRandom method
				
				KeyGenerator keyGen = KeyGenerator.getInstance("AES");	
				FileInputStream fin = new FileInputStream("/root/Desktop/keys2/decrypted_RandomBytes");
				ObjectInputStream oos = new ObjectInputStream(fin);
				
				File file = new File("/root/Desktop/keys2/decrypted_RandomBytes");
				byte[] fileData = new byte[(int) file.length()];
				FileInputStream in = new FileInputStream(file);
				
				keyGen.init(in.read(fileData));
				SecretKey aesKey = keyGen.generateKey();				
				keyOOS.writeObject(aesKey);
				in.close();
				keyOOS.close();
				keyFOS.close();
				fin.close();
				
				textArea.setText("AES key generated and written to file: AESKeyFile_Revealed");
				
				}catch(Exception e){
					e.getMessage();
				}
			}
		});
		btnBuildKey.setBounds(12, 236, 129, 25);
		contentPane.add(btnBuildKey);
		
		JButton btnExit = new JButton("Exit");
		btnExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				dispose();
			}
		});
		btnExit.setBounds(329, 236, 97, 25);
		contentPane.add(btnExit);
		
		final JCheckBox chckbxSignature = new JCheckBox("Signature");
		chckbxSignature.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				File file = new File("/root/Desktop/keys2/encrypted_Signature");
				textArea.setText("");
				
				if(chckbxSignature.isSelected() && file.exists()){
					RsaEncryption rsa = new RsaEncryption();
					try{
						rsa.decrypt_Sign();
						BufferedReader br = new BufferedReader(new FileReader("/root/Desktop/keys2/decrypted_Signature"));
						 String line = null;
						 while ((line = br.readLine()) != null) {
						   textArea.append(line);
						 }
						 br.close();
					}catch(Exception e){
						e.getStackTrace();
					}
				} else if(!file.exists()){
					textArea.setText("Signature Doesn't Exist!");
				}else{
					textArea.setText("");
				}
			}
		});
		chckbxSignature.setBounds(153, 199, 129, 23);
		contentPane.add(chckbxSignature);
		
		final JCheckBox chckbxDecryptMessage = new JCheckBox("Decrypt Message");
		chckbxDecryptMessage.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				File file = new File("/root/Desktop/keys2/scrambled");
				
				if(chckbxDecryptMessage.isSelected() && file.exists()){
					AES_Encryption aes = new AES_Encryption();
					try{
					String tmp;
					  tmp =  aes.aesDecrypt();
					  textArea.setText(tmp);
					}catch(Exception e){
						e.getMessage();
					}
				}else if (! file.exists()){
					 textArea.setText("Message can't be decrypted, message doesn't exist!");
				}else{
					textArea.setText("");
				}
			}
		});
		chckbxDecryptMessage.setBounds(153, 237, 164, 23);
		contentPane.add(chckbxDecryptMessage);
		
		JCheckBox chckbxCompareIds = new JCheckBox("Compare ID's");
		chckbxCompareIds.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try{
				
					File first = new File("/root/Desktop/keys2/AESKeyFile");
					File second = new File("/root/Desktop/keys2/decrypted_RSA_AESKeyFile");
					
					boolean retval = false;
				      
				      if ((first.exists()) && (second.exists()) 
				         && (first.isFile()) && (second.isFile()))
				      {
				         if (first.getCanonicalPath().equals(second.getCanonicalPath()))
				         {
				            retval = true;
				            textArea.setText("Valid Session ID !");
				         }
				         else
				         {
				            FileInputStream firstInput = null;
				            FileInputStream secondInput = null;
				            BufferedInputStream bufFirstInput = null;
				            BufferedInputStream bufSecondInput = null;

				            try
				            {            
				               firstInput = new FileInputStream(first); 
				               secondInput = new FileInputStream(second);
				               bufFirstInput = new BufferedInputStream(firstInput, BUFFER_SIZE); 
				               bufSecondInput = new BufferedInputStream(secondInput, BUFFER_SIZE);
				   
				               int firstByte;
				               int secondByte;
				               
				               while (true)
				               {
				                  firstByte = bufFirstInput.read();
				                  secondByte = bufSecondInput.read();
				                  if (firstByte != secondByte)
				                  {
				                     break;
				                  }
				                  if ((firstByte < 0) && (secondByte < 0))
				                  {
				                     retval = true;
				                     break;
				                  }
				               }
				            }
				            finally
				            {
				               try
				               {
				                  if (bufFirstInput != null)
				                  {
				                     bufFirstInput.close();
				                  }
				               }
				               finally
				               {
				                  if (bufSecondInput != null)
				                  {
				                     bufSecondInput.close();
				                  }
				                  textArea.setText("Valid Session ID = " + String.valueOf(retval));
				               }
				            }
				         }
				      }
				
				}catch(Exception e){
					e.getMessage();
				}
			}
		});
		chckbxCompareIds.setBounds(286, 200, 129, 23);
		contentPane.add(chckbxCompareIds);
	}
}